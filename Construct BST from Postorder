Node* constructTreeUtil(int post[], int n) 
{ 
    // Last node is root 
    Node* root = new Node(post[n - 1]); 
    stack<Node*> s; 
    s.push(root); 
  
    // Traverse from second last node 
    for (int i = n - 2; i >= 0; --i) 
    { 
        Node* x = new Node(post[i]); 
  
        // Keep popping nodes while top()  
        // of stack is greater. 
        Node* temp = NULL; 
        while (s.size() &&  
               post[i] < s.top()->data)  
            temp = s.top(), s.pop();      
  
        // Make x as left child of temp  
        if (temp != NULL)  
            temp->left = x;      
  
        // Else make x as right of top      
        else
            s.top()->right = x; 
        s.push(x); 
    } 
    return root; 
} 
  
// Function that calls the method 
// which contructs the tree 
Node* constructTree(int post[], int size) 
{ 
    return constructTreeUtil(post, size); 
} 
